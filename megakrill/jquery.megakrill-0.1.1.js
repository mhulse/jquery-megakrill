/**
 * jQuery MegaKrill
 *
 * @author    Micky Hulse
 * @link      http://hulse.me
 * @docs      https://github.com/registerguard/jquery-megakrill
 * @copyright Copyright (c) 2012 Micky Hulse.
 * @license   Dual licensed under the MIT or GPL Version 2 licenses.
 * @version   1.0.0
 * @date      2012/07/09
 */

//----------------------------------

// Notes to self:
//console.profile('profile foo');
// ... code here ...
//console.profileEnd('profile foo');
// ... or:
// console.time('timing foo');
// ... code here ...
// console.timeEnd('timing foo');

//----------------------------------

// @TODO:
// Focus to open?
// Improve "doc" comments.
// Add option to use existing "toggle" button in HTML (i.e. not generated by this script).

//----------------------------------

;(function($) {
	
	//--------------------------------------------------------------------------
	//
	// Constants:
	//
	//--------------------------------------------------------------------------
	
	/**
	 * Commonly used variables.
	 *
	 * @type { object }
	 *
	 * @const
	 */
	
	var constants = {
		
		C      : ((typeof console !== 'undefined') ? true : false), // Check if the javascript console is available.
		NS     : 'megakrill',                                       // Namespace identifier.
		PREFIX : 'mk'                                               // Class prefix.
		
	}, // constants
	
	//--------------------------------------------------------------------------
	//
	// Public methods:
	//
	//--------------------------------------------------------------------------
	
	/**
	 * Methods object.
	 *
	 * @type { object }
	 */
	
	methods = {
		
		/**
		 * Init constructor.
		 *
		 * @type   { function }
		 * @param  { object } opts Options object literal.
		 * @this   { object.jquery }
		 * @return { object.jquery } Returns target object(s) for chaining purposes.
		 */
		
		init : function(opts) {
			
			//----------------------------------
			// Loop & return each "this":
			//----------------------------------
			
			return this.each(function() {
				
				//----------------------------------
				// Local variable(s):
				//----------------------------------
				
				var $this = $(this),                                                            // Target object.
				data      = $this.data(constants.NS),                                           // Namespace instance data.
				options   = $.extend({}, settings.external, $.fn[constants.NS].defaults, opts); // Merge settings, defaults and options.
				
				//----------------------------------
				// Initialize data:
				//----------------------------------
				
				if ( ! data) {
					
					//----------------------------------
					// Create HTML:
					//----------------------------------
					
					var $wrap = $('<div />', { 'class' : constants.NS }),                                // <div> that holds generated elements.
					$toggle   = $('<div />', { 'class' : settings.internal.toggleClass }),               // Toggle button <div>.
					$a        = $('<a />',   { 'class' : settings.internal.closedClass, 'href' : '#' }); // Toggle button <a>.
					
					//----------------------------------
					// Namespaced instance data:
					//----------------------------------
					
					$this.data(constants.NS, {
						
						a       : $a,
						init    : false,
						options : options,
						target  : $this,
						toggle  : $toggle,
						toggled : false,
						wrap    : $wrap
						
					});
					
					//----------------------------------
					// Easy access for later:
					//----------------------------------
					
					data = $this.data(constants.NS);
					
				}
				
				//----------------------------------
				// Data initialization check:
				//----------------------------------
				
				if ( ! data.init) {
					
					//----------------------------------
					// Data initialization flag:
					//----------------------------------
					
					data.init = true;
					
					//----------------------------------
					// Callback:
					//----------------------------------
					
					options.onInit.call($this);
					
					//----------------------------------
					// Check for object(s):
					//----------------------------------
					
					if ($this.length) {
						
						//----------------------------------
						// Get the (cloned) menu?
						//----------------------------------
						
						var $menu = (options.clone) ? getClone.call($this) : $this;
						
						//----------------------------------
						// Add <a> to toggle <div>:
						//----------------------------------
						
						$a.appendTo($toggle)
						
						//----------------------------------
						// Setup toggle:
						//----------------------------------
						
						makeToggle.call($this, $a, $menu);
						
						//----------------------------------
						// Add toggle <div> to wrap <div>:
						//----------------------------------
						
						$wrap.append($toggle)
						
						//----------------------------------
						// Clone?
						//----------------------------------
						
						if (options.clone) $wrap.append($menu);
						
						//----------------------------------
						// Clone?
						//----------------------------------
						
						$wrap.insertBefore($this);
						
						//----------------------------------
						// Callback:
						//----------------------------------
						
						options.onAfterInit.call($this);
						
					} else {
						
						if (constants.C) console.warn('there was a problem with your markup');
						
						return this;
						
					}
					
				} else {
					
					if (constants.C) console.warn(constants.NS, 'already initialized on', this);
					
					return this;
					
				}
				
			});
			
		}, // init()
		
		//--------------------------------------------------------------------
		
		/**
		 * Removes plugin from element.
		 *
		 * @type   { function }
		 * @this   { object.jquery }
		 * @return { object.jquery } Returns target object(s) for chaining purposes.
		 */
		
		destroy: function() {
			
			//----------------------------------
			// Loop & return each "this":
			//----------------------------------
			
			return this.each(function() {
				
				//----------------------------------
				// Local variable(s):
				//----------------------------------
				
				var $$ = $(this),
				data   = $$.data(constants.NS);
				
				//----------------------------------
				// Data?
				//----------------------------------
				
				if (data) {
					
					//----------------------------------
					// Local variable(s):
					//----------------------------------
					
					var options = data.options;
					
					//----------------------------------
					// Clone?
					//----------------------------------
					
					if ( ! options.clone) {
						
						//----------------------------------
						// Remove style attribute:
						//----------------------------------
						
						data.target.removeAttr('style');
						
					}
					
					//----------------------------------
					// Remove generated HTML:
					//----------------------------------
					
					data.wrap.remove(); // All bound events and jQuery data associated with the elements are removed: rgne.ws/LqMnF5
					
					//----------------------------------
					// Remove data from target:
					//----------------------------------
					
					$$.removeData(constants.NS);
					
				} else {
					
					if (constants.C) console.warn(constants.NS, 'already initialized on', this);
					
				}
			
			});
			
		} // destroy()
		
	}, // methods
	
	//--------------------------------------------------------------------------
	//
	// Private methods:
	//
	//--------------------------------------------------------------------------
	
	/**
	 * Get menu.
	 *
	 * @type   { function }
	 * @this   { object.jquery }
	 * @return { object.jquery } Returns clone of @this.
	 */
	
	getClone = function() {
		
		//----------------------------------
		// Local variable(s):
		//----------------------------------
		
		var options = this.data(constants.NS).options,
		$clone      = this.clone();
		
		//----------------------------------
		// ID?
		//----------------------------------
		
		if (typeof options.cloneId === 'string') {
			
			//----------------------------------
			// Use provided ID string:
			//----------------------------------
			
			$clone.attr('id', options.cloneId);
			
		} else if (options.cloneId) {
			
			//----------------------------------
			// Instead, get ID of target:
			//----------------------------------
			
			var id = $clone.attr('id');
			
			//----------------------------------
			// Auto-generate id with prefix:
			//----------------------------------
			
			if (id) $clone.attr('id', constants.PREFIX + '-' + id);
			
		} else {
			
			//----------------------------------
			// Just remove the cloned ID:
			//----------------------------------
			
			$clone.removeAttr('id');
			
		}
		
		//----------------------------------
		// Remove cloned children elements?
		//----------------------------------
		
		if (options.cloneRemove) $clone.find(options.cloneRemove).remove();
		
		$clone
			
			//----------------------------------
			// Add class "clone" class:
			//----------------------------------
			
			.addClass(settings.internal.cloneClass)
			
			//----------------------------------
			// Hide:
			//----------------------------------
			
			.hide();
		
		//----------------------------------
		// Return the cloned menu:
		//----------------------------------
		
		return $clone;
		
	}, // getClone()
	
	//--------------------------------------------------------------------
	
	/**
	 * Get menu.
	 *
	 * @type  { function }
	 * @param { object.jquery } $a jQuery <a> object.
	 * @param { object.jquery } $menu jQuery <ul> object.
	 * @this  { object.jquery }
	 */
	
	makeToggle = function($a, $menu) {
		
		//----------------------------------
		// Local variable(s):
		//----------------------------------
		
		var data = this.data(constants.NS),
		options  = data.options;
		
		//----------------------------------
		// Setup toggle:
		//----------------------------------
		
		$a.on('click.' + constants.NS + ' touchstart.' + constants.NS, function(e) {
			
			//----------------------------------
			// Handle event type:
			//----------------------------------
			
			if ( ! e.handled) { // rgne.ws/Ny7oxk
				
				//----------------------------------
				// Local variable(s)?
				//----------------------------------
				
				var $$ = $(this),
				toggled = $$.data('toggled'); // rgne.ws/PX7b8K
				
				//----------------------------------
				// Toggle state:
				//----------------------------------
				
				$$.data('toggled', ( ! toggled));
				
				if ( ! toggled) {
					
					//----------------------------------
					// Callback:
					//----------------------------------
					
					options.onBeforeShow.call($menu);
					
					$$
						
						//----------------------------------
						// Remove existing classes:
						//----------------------------------
						
						.removeClass()
						
						//----------------------------------
						// Add "opened" class:
						//----------------------------------
						
						.addClass(settings.internal.openedClass);
					
					//----------------------------------
					// Menu:
					//----------------------------------
					
					$menu
						
						//----------------------------------
						// Stop and clear queue:
						//----------------------------------
						
						.stop(true)
						
						//----------------------------------
						// Animate open:
						//----------------------------------
						
						.animate(options.animIn, options.speedIn, options.easeIn, function() {
							
							//----------------------------------
							// Callback:
							//----------------------------------
							
							options.onShow.call($menu);
							
						});
					
				} else {
					
					//----------------------------------
					// Callback:
					//----------------------------------
					
					options.onBeforeHide.call($menu);
					
					//----------------------------------
					// Menu:
					//----------------------------------
					
					$menu
						
						//----------------------------------
						// Stop and clear queue:
						//----------------------------------
						
						.stop(true)
						
						//----------------------------------
						// Animate closed:
						//----------------------------------
						
						.animate(options.animOut, options.speedOut, options.easeOut, function() {
							
							//----------------------------------
							// Toggle:
							//----------------------------------
							
							$$
								
								//----------------------------------
								// Remove existing classes:
								//----------------------------------
								
								.removeClass()
								
								//----------------------------------
								// Add "closed" class:
								//----------------------------------
								
								.addClass(settings.internal.closedClass);
							
							//----------------------------------
							// Callback:
							//----------------------------------
							
							options.onHide.call($menu);
							
						});
					
				}
				
				//----------------------------------
				// Event has been handled:
				//----------------------------------
				
				e.handled = true;
				
			}
			
			//----------------------------------
			// Stop propagation:
			//----------------------------------
			
			e.stopPropagation();
			
			//----------------------------------
			// Prevent default:
			//----------------------------------
			
			e.preventDefault();
			
		});
		
	}; // makeToggle()
	
	//--------------------------------------------------------------------------
	//
	// Method calling logic:
	//
	//--------------------------------------------------------------------------
	
	/**
	 * Boilerplate plugin logic.
	 *
	 * @link   rgne.ws/OvKpPc
	 * @type   { function }
	 * @param  { string } method String method identifier.
	 * @return { method } Calls plugin method with supplied params.
	 *
	 * @constructor
	 */
	
	$.fn[constants.NS] = function(method) {
		
		//----------------------------------
		// Boilerplate:
		//----------------------------------
		
		if (methods[method]) {
			
			return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
			
		} else if ((typeof method === 'object') || ( ! method)) {
			
			return methods.init.apply(this, arguments);
			
		} else {
			
			$.error('Method ' + method + ' does not exist on jQuery.' + constants.NS); // Should I override? rgne.ws/MwgkP8
			
		}
		
	}; // constructor()
	
	//--------------------------------------------------------------------------
	//
	// Default settings:
	//
	//--------------------------------------------------------------------------
	
	/**
	 * Settings object.
	 *
	 * @type { object }
	 */
	
	var settings = {}; // Initialize settings object.
	
	//----------------------------------
	
	/**
	 * Private settings.
	 *
	 * @type { object }
	 */
	
	settings.internal = {
		
		cloneClass  : constants.PREFIX + '-clone',
		closedClass : constants.PREFIX + '-closed',
		openedClass : constants.PREFIX + '-opened',
		toggleClass : constants.PREFIX + '-toggle'
		
	}; // settings.internal
	
	//----------------------------------
	
	/**
	 * Public settings.
	 *
	 * @type { object }
	 */
	
	settings.external = {
		
		animIn      : { height: 'toggle' }, // What animation object to use to show the submenus.
		animOut     : { height: 'toggle' }, // IBID, but for hiding.
		clone       : true,                 // Set to false if you don't want to clone target object.
		cloneId     : true,                 // Auto clone id? One of "<id>", true or false.
		easeIn      : 'swing',              // Easing function in.
		easeOut     : 'swing',              // Easing function out.
		cloneRemove : false,                // Element(s) for the clone to remove.
		speedIn     : 'normal',             // Animation speed in.
		speedOut    : 'normal',             // Animation speed out.
		
		// Callbacks:
		
		onInit       : function() {}, // After plugin data initialized.
		onAfterInit  : function() {}, // After plugin initialization.
		onBeforeShow : function() {}, // Before reveal animation begins.
		onShow       : function() {}, // After reveal animation ends.
		onBeforeHide : function() {}, // Before hide animation begins.
		onHide       : function() {}  // After hide animation ends.
		
	}; // settings.external
	
	//----------------------------------
	
	/**
	 * Assign defaults to external.
	 *
	 * @type { object }
	 */
	
	$.fn[constants.NS].defaults = settings.external; // rgne.ws/Mxifnq
	
})(jQuery);